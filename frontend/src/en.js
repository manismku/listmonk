export default {
  globals: {
    // Universal terms.
    terms: {
      dashboard: 'Dashboard',
      list: 'List | Lists',
      lists: 'Lists',
      subscriber: 'Subscriber | Subscribers',
      subscribers: 'Subscribers',
      campaign: 'Campaign | Campaigns',
      campaigns: 'Campaigns',
      messenger: 'Messenger | Messengers',
      messengers: 'Messengers',
      template: 'Template | Templates',
      templates: 'Templates',
      tag: 'Tag | Tags',
      tags: 'Tags',
    },
    messages: {
      emptyState: 'Nothing here',
      confirm: 'Are you sure?',
      created: '\'{name}\' created',
      updated: '\'{name}\' updated',
      deleted: '\'{name}\' deleted',
      passwordChange: 'Enter a value to change',
    },
    fields: {
      name: 'Name',
      createdAt: 'Created',
      updatedAt: 'Updated',
      type: 'Type',
      id: 'ID',
      uuid: 'UUID',
      status: 'Status',
    },
    buttons: {
      new: 'New',
      add: 'Add',
      addNew: 'Add new',
      remove: 'Remove',
      ok: 'Ok',
      cancel: 'Cancel',
      close: 'Close',
      edit: 'Edit',
      clone: 'Clone',
      delete: 'Delete',
      enabled: 'Enabled',
      save: 'Save',
      saveChanges: 'Save changes',
      learnMore: 'Learn more',
    },
  },

  menu: {
    dashboard: 'Dashboard',
    allLists: 'All lists',
    forms: 'Forms',
    allSubscribers: 'All subscribers',
    allCampaigns: 'All campaigns',
    newCampaign: 'Create new',
    media: 'Media',
    settings: 'Settings',
    logs: 'Logs',
  },

  // Lists terms and page.
  lists: {
    type: 'Type',
    types: {
      public: 'Public',
      private: 'Private',
    },
    optins: {
      single: 'Single opt-in',
      double: 'Double opt-in',
    },
    typeHelp: 'Public lists are open to the world to subscribe and their names may appear on public pages such as the subscription management page.',
    optin: 'Opt-in',
    optinHelp: 'Double opt-in sends an e-mail to the subscriber asking for confirmation. On Double opt-in lists, campaigns are only sent to confirmed subscribers.',
    sendCampaign: 'Send campaign',
    confirmDelete: 'Are you sure? This does not delete subscribers.',
    optinTo: 'Opt-in to {name}',
    confirmSubscriptions: 'Confirm subscription(s) to {name}',
    newList: 'New list',
  },

  // Campaigns terms and page.
  campaigns: {
    // Campaigns list.
    queryPlaceholder: 'Name or subject',
    scheduled: 'Scheduled',
    timestamps: 'Timestamps',
    progress: 'Progress',
    views: 'Views',
    clicks: 'Clicks',
    sent: 'Sent',
    confirmSchedule: 'This campaign will start automatically at the scheduled date and time.Schedule now?',
    copyOf: 'Copy of {name}',
    confirmDelete: 'Delete {name}',
    started: '\'{name}\' started',
    statusChanged: '\'{name}\' is {status}',
    pause: 'Pause',
    preview: 'Preview',

    // Individual campaign page.
    newCampaign: 'New campaign',
    start: 'Start campaign',
    schedule: 'Schedule campaign',
    continue: 'Continue',
    send: 'Send',
    subject: 'Subject',
    fromAddress: 'From address',
    fromAddressPlaceholder: 'Your Name <noreply@yoursite.com>',
    sendToLists: 'Lists to send to',
    sendLater: 'Send later',
    dateAndTime: 'Date and time',
    sendTest: 'Send test message',
    testEmails: 'E-mails',
    sendTestHelp: 'Hit Enter after typing an address to add multiple recipients. The addresses must belong to existing subscribers.',
    testSent: 'Test message sent',
    invalid: 'Invalid campaign',
  },

  media: {
    title: 'Media',
    uploadImage: 'Upload image',
    uploadHelp: 'Click or drag one or more images here',
    upload: 'Upload',
  },

  templates: {
    default: 'Default',
    preview: 'Preview',
    makeDefault: 'Set default',
    newTemplate: 'New template',
    rawHTML: 'Raw HTML',
    placeholderHelp: 'The placeholder {placeholder} should appear in the template.',
  },

  // Subscriber terms and page.
  subscribers: {
    status: {
      enabled: 'Enabled',
      unconfirmed: 'Unconfirmed',
      subscribed: 'Subscribed',
      unsubscribed: 'Unsubscribed',
      blocklisted: 'Blocklisted',
    },
    queryPlaceholder: 'E-mail or name',
    advancedQuery: 'Advanced',
    advancedQueryHelp: 'Partial SQL expression to query subscriber attributes',
    query: 'Query',
    reset: 'Reset',
    numSelected: '{num} subscriber(s) selected',
    selectAll: 'Select all {num}',
    newSubscriber: 'New subscriber',
    email: 'E-mail',
    blocklistedHelp: 'Blocklisted subscribers will never receive any e-mails.',
    lists: 'Lists',
    listsPlaceholder: 'Lists to subscriber to',
    listsHelp: 'Lists from which subscribers have unsubscribed themselves cannot be removed.',
    attribs: 'Attributes',
    attribsHelp: 'Attributes are defined as a JSON map, for example:',
    invalidJSON: 'Invalid JSON in attributes',
    downloadData: 'Download data',
    confirmBlocklist: 'Blocklist {num} subscriber(s)?',
    confirmDelete: 'Delete {num} subscriber(s)?',
    subscribersDeleted: '{num} subscriber(s) deleted',
    listChangeApplied: 'List change applied',

    manageLists: 'Manage lists',
    markUnsubscribed: 'Mark as unsubscribed',
  },

  forms: {
    title: 'Forms',
    publicLists: 'Public lists',
    selectHelp: 'Select lists to add to the form.',
    formHTML: 'Form HTML',
    formHTMLHelp: 'Use the following HTML to show a subscription form on an external webpage. The form should have the `email` field and one or more `l` (list UUID) fields. The `name` field is optional.',
  },

  import: {
    title: 'Import subscribers',
    subscribe: 'Subscribe',
    blocklist: 'Blocklist',
    overwrite: 'Overwrite?',
    overwriteHelp: 'Overwrite name and attribs of existing subscribers?',
    csvDelim: 'CSV delimiter',
    csvDelimHelp: 'Default delimiter is comma.',
    listSubHelp: 'Lists to subscribe to.',
    csvFile: 'CSV or ZIP file',
    csvFileHelp: 'Click or drag a CSV or ZIP file here',
    upload: 'Upload',
    instructions: 'Instructions',
    instructionsHelp: 'Upload a CSV file or a ZIP file with a single CSV file in it to bulk import subscribers. The CSV file should have the following headers with the exact column names. attributes (optional) should be a valid JSON string with double escaped quotes.',
    csvExample: 'Example raw CSV',
    recordsCount: '{num} / {total} records',
    importDone: 'Done',
    stopImport: 'Stop import',
    importStarted: 'Import started',
  },

  settings: {
    title: 'Settings',

    general: {
      name: 'General',
      rootURL: 'Root URL',
      rootURLHelp: 'Public URL of the installation (no trailing slash).',
      logoURL: 'Root URL',
      logoURLHelp: '(Optional) full URL to the static logo to be displayed on user facing view such as the unsubscription page.',
      faviconURL: 'Favicon URL',
      faviconURLHelp: '(Optional) full URL to the static favicon to be displayed on user facing view such as the unsubscription page.',
      fromEmail: 'Default `from` email',
      fromEmailHelp: '(Optional) full URL to the static logo to be displayed on user facing view such as the unsubscription page.',
      adminNotifEmails: 'Admin notification e-mails',
      adminNotifEmailsHelp: 'Comma separated list of e-mail addresses to which admin notifications such as import updates, campaign completion, failure etc. should be sent.',
    },

    performance: {
      name: 'Performance',
      concurrency: 'Concurrency',
      concurrencyHelp: 'Maximum concurrent worker (threads) that will attempt to send messages simultaneously.',
      messageRate: 'Message rate',
      messageRateHelp: 'Maximum number of messages to be sent out per second per worker in a second. If concurrency = 10 and message_rate = 10, then up to 10x10=100 messages may be pushed out every second. This, along with concurrency, should be tweaked to keep the net messages going out per second under the target message servers rate limits if any.',
      batchSize: 'Batch size',
      batchSizeHelp: 'The number of subscribers to pull from the databse in a single iteration. Each iteration pulls subscribers from the database, sends messages to them, and then moves on to the next iteration to pull the next batch. This should ideally be higher than the maximum achievable throughput (concurrency * message_rate).',
      maxErrThreshold: 'Maximum error threshold',
      maxErrThresholdHelp: 'The number of errors (eg: SMTP timeouts while e-mailing) a running campaign should tolerate before it is paused for manual investigation or intervention. Set to 0 to never pause.',
    },

    privacy: {
      name: 'Privacy',
      individualSubTracking: 'Individual subscriber tracking',
      individualSubTrackingHelp: 'Track subscriber-level campaign views and clicks. When disabled, view and click tracking continue without being linked to individual subscribers.',
      listUnsubHeader: 'Include `List-Unsubscribe` header',
      listUnsubHeaderHelp: 'Include unsubscription headers that allow e-mail clients to allow users to unsubscribe in a single click.',
      allowBlocklist: 'Allow blocklisting',
      allowBlocklistHelp: 'Allow subscribers to unsubscribe from all mailing lists and mark themselves as blocklisted?',
      allowExport: 'Allow exporting',
      allowExportHelp: 'Allow subscribers to export data collected on them?',
      allowWipe: 'Allow wiping',
      allowWipeHelp: 'Allow subscribers to delete themselves including their subscriptions and all other data from the database. Campaign views and link clicks are also removed while views and click counts remain (with no subscriber associated to them) so that stats and analytics are not affected.',
    },

    media: {
      title: 'Media uploads',
      provider: 'Provider',

      upload: {
        path: 'Upload path',
        pathHelp: 'Path to the directory where media will be uploaded.',
        uri: 'Upload URI',
        uriHelp: 'Upload URI that is visible to the outside world. The media uploaded to upload_path will be publicly accessible under {root_url}/{}, for instance, https://listmonk.yoursite.com/uploads.',
      },
      s3: {
        region: 'Region',
        key: 'AWS access key',
        secret: 'AWS access secret',
        bucketType: 'Bucket type',
        bucketTypePrivate: 'Private',
        bucketTypePublic: 'Public',
        bucket: 'Bucket',
        bucketPath: 'Bucket path',
        bucketPathHelp: 'Path inside the bucket to upload files. Default is /',
        uploadExpiry: 'Upload expiry',
        uploadExpiryHelp: '(Optional) Specify TTL (in seconds) for the generated presigned URL. Only applicable for private buckets (s, m, h, d for seconds, minutes, hours, days).',
      },
    },

    smtp: {
      name: 'SMTP',
      enabled: 'Enabled',
      host: 'Host',
      hostHelp: 'SMTP server\'s host address.',
      port: 'Port',
      portHelp: 'SMTP server\'s port.',
      authProtocol: 'Auth protocol',
      username: 'Username',
      password: 'Password',
      passwordHelp: 'Enter to change',
      heloHost: 'HELO hostname',
      heloHosthelp: 'Optional. Some SMTP servers require a FQDN in the hostname. By default, HELLOs go with `localhost`. Set this if a custom hostname should be used.',
      tls: 'TLS',
      tlsHelp: 'Enable STARTTLS.',
      skipTLS: 'Skip TLS verification',
      skipTLSHelp: 'Skip hostname check on the TLS certificate.',
      maxConns: 'Max. connections',
      maxConnsHelp: 'Maximum concurrent connections to the SMTP server.',
      retries: 'Retries',
      retriesHelp: 'Number of times to rety when a message fails.',
      idleTimeout: 'Idle timeout',
      idleTimeoutHelp: 'Time to wait for new activity on a connection before closing it and removing it from the pool (s for second, m for minute).',
      waitTimeout: 'Wait timeout',
      waitTimeoutHelp: 'Time to wait for new activity on a connection before closing it and removing it from the pool(s for second, m for minute).',
      setCustomHeaders: 'Set custom headers',
      customHeaders: 'Custom headers',
      customHeadersHelp: 'Optional array of e-mail headers to include in all messages sent from this server. eg: [{"X-Custom": "value"}, {"X-Custom2": "value"}]',
    },

    messengers: {
      name: 'Messengers',
      nameHelp: 'eg: my-sms. Alphanumeric / dash.',
      url: 'URL',
      urlHelp: 'Root URL of the Postback server.',
      username: 'Username',
      password: 'Password',
      skipTLSHelp: 'Skip hostname check on the TLS certificate.',
      maxConns: 'Max. connections',
      maxConnsHelp: 'Maximum concurrent connections to the SMTP server.',
      retries: 'Retries',
      retriesHelp: 'Number of times to rety when a message fails.',
      timeout: 'Idle timeout',
      timeoutHelp: 'Time to wait for new activity on a connection before closing it and removing it from the pool (s for second, m for minute).',
      messageSaved: 'Settings saved. Reloading app ...',
      messageDiscard: 'Discard changes?',
    },
  },

  // Logs.
  logs: {
    title: 'Logs',
  },

  dashboard: {
    orphanSubs: 'Orphans',
    messagesSent: 'Messages sent',
    campaignViews: 'Campaign views',
    linkClicks: 'Link clicks',
  },
};
